{       

                Switchaoo v1.0 - by Hushaboom

------------------------------------------------------------------------------

 Copyright [2023] [Robert Kerr]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

------------------------------------------------------------------------------

Switcharoo is a free plug-in being developed by Robert Kerr as a more powerfull repacement for the 
Round Robin functionality.  

Switcharoo will feature:

    -Randomized group cycling with no sample repeat per random cycle
    -Individual sample cycling for layering voices and greater flexibility in sample cycling
    -Round Robin effect can be turned on and off at will, from the midi controller using either Midi, or Note Events.. Or Both!
    -Gives access to fast sample switching to people with limited mobility (And everyone else!).  
    -Switch voices seamlessly during live performance, 
    or to save time when recording. 

Switcharoo currently features:

    -Randomized Group cycling with no repeat per cycle
    -Switch set to note sequence
    -Switcharoo can be switched on by playing 1/8th note tripplet on any key 
    -Switched off by playing 4 1/16th notes on any key

    ***Dev Note:  Switches not timed exactly to beat yet, so 3 notes in one beat to turn on, 4 notes to turn off***
    ***Randomizes groups only, not zones.***
    ***MUST have 3 or more groups to work***

    User Zone selection/sample loading functionality is set up but not incorporated, if you want to experiment yourself.

    -Handles up to 4096 groups.  

    Switcharoo is free to use and modify by anyone.  
    Still in development.


    Usage:
    Place up to 4096 groups in your instrument.
    Begin playing.
    Turn on Switcharoo by playing 1/8th note tripplet
    Turn off with 4 1/16th's.

	If you enjoy this script, please consider donating to my gofundme.

	https://gofund.me/dc7cce91
   
}

{----------Begin----------}

on init

    make_perfview
    set_script_title( "Switcharoo" )

    {Event variables}
    declare $i  {Generic counting variable}
    declare $beatCount := 1  {Counts the beat}
    declare $keyCount   {Counts Note events}
    declare $currNote   {Note being played}
    declare $oldNote    {Last note played}
    declare $triggerNote := 36  {Trigger}
    declare $switcharoo_On  {On/Off switch}
    declare $switchOn := 0  {Switch for sample load}
    declare $zeroOn     {}

    {RNG Variables}
    declare $lastNum    {Last number generated}
    declare $randNum := 0    {Random number, used for group select.  Default Zero}
    declare $randSearchIndex    {Index for selected number}

    {Group/Zone Variables}
    declare $onGroup := 0   {Group to play}
    declare $startZoneCount {Number of NON user zones}
    declare $zoneCount  {Total number of zones}
    declare $zoneId     {Zone ID, NOT index.}

    {Time variables}
    declare $conv := 1000   {Conversion factor for reading ksp time in ms, not Âµs}

    {Arrays}
    declare %randArray[4096]    {Random number array, for Round-Robin select}
    declare %startZones[1024]   {User zone array, set to maximum}
    declare %zoneParams[131072] {Array for storing Zone params}

    {Prefab some zones (Max 1024)}
    set_num_user_zones (1024) {Declare max number of user zones}

     while ( $i < 1024 - 1) {Create user zones, and place them all on Note 0 (-C2), velo index 1}
 
        set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_VELO, 1) {Nullify velocity range}
        set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_ROOT_KEY, 0)  {Root to first key}
        set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_KEY, 0) {Low key to root}
        set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_LOW_KEY, 0) {High key to root}

        inc( $i )

    end while

    {Get Zone ID for User zones}    
    while ($i <= $startZoneCount )

        %startZones[$i] := get_zone_id ($i)
        inc ($i)
    
    end while

    {Sample file management}
    declare @sampleName
    declare @samplePath
    declare @basepath
    
    @basepath := get_folder($GET_FOLDER_PATCH_DIR)  {Patch directory}
    $zoneCount := get_num_zones()   {Total Zones}
    $startZoneCount := get_num_zones() - 1024   {Number of pre-loaded zones}

	set_listener($NI_SIGNAL_TIMER_BEAT, 1)  {Listener set to quarter notes, for tempo based switches (Primary Mode)}
    
end on

{----------End Init----------}




{----------Begin Functions----------}
function SS_func_randomer()

    {Selects random number, sets as group number, and populates array for logging. Ensures numbers repeat.}
	while ((search(%randArray, $randNum) # -1)) {Checks to see if number not not present (deliberate double negative, works better this way)}
	
		$randNum := random(-1,$NUM_GROUPS)  {Pick a random group index}
        if( $randNum = $NUM_GROUPS )

            $randNum := $randNum - 1

        end if
	
	end while
	
	%randArray[$randSearchIndex] := $randNum    {Put the number in the array}

	inc($randSearchIndex)   {Advance the index}
	
	if ($randSearchIndex = $NUM_GROUPS - 1) {Reset when all groups have cycled}

		$randSearchIndex := 0
		$zeroOn := 0
		$lastNum := $randNum
		$randNum := 0
		
		while ($zeroOn < $NUM_GROUPS)
		
			%randArray[$zeroOn] := -1   {Sets -1 as placeholder at all indicies, must be -1 as 0 is a group number.}
			inc($zeroOn)
		
		end while
		
	end if

end function

function SS_func_SamSwapper()

    if ($currNote = 24)

        if ($switchOn = 0)

            {Set the Zone params, Zone ID's are set in while loop on line 73}
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_VELO, 127) { Cover entire velocity range }
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_ROOT_KEY, 26)  { Root same as note number }
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_KEY, 26) { Low key same as note number }
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_LOW_KEY, 26) { High key same as note number }
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_VOLUME, 600) { Set the volume }

            {Load a sample}
            {
                Create an array of sample file names and use the randomer function to cycle through them!  
                This is sketchy because of the async and will need to be modified to preload the samples prior to placement.
                And so, is not set-up to function in this script.
            }

            wait_async(set_sample (%NI_USER_ZONE_IDS[$i], @basepath & "YOUR SAMPLE.wav"))

            $switchOn := 1

        else

            {Nullify the zone}
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_VELO, 1) 
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_ROOT_KEY, 0)  
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_HIGH_KEY, 0) 
            set_zone_par (%NI_USER_ZONE_IDS[$i], $ZONE_PAR_LOW_KEY, 0) 

            {Clear the sample}
            wait_async(set_sample (%NI_USER_ZONE_IDS[$i], ""))

            $switchOn := 0
        
        end if
    
    end if

end function

{----------End Functions----------}




{ Set Note conditions in on note and on release callbacks.  

    [eg]  Set switch to -C2:  

        if (($currNote = 0) & ($switcharoo_On = 1))

            $switcharoo_On := 0

        else

            $switcharoo_On := 1

        end if

    [\eg]

 }

on note

    disallow_group ($ALL_GROUPS)
   
    inc ($keyCount)
    $onGroup := $randNum
    $currNote := $EVENT_NOTE

    allow_group ($onGroup)

end on

{  }
on release

    $oldNote := $currNote

    if ($switcharoo_On = 1)

        call SS_func_randomer()

    else

        $randNum := 0

    end if
    
end on

{  }
on listener

    {Set time conditions for triggering switch here.  Listener cycles every quarter note.  }
    if ($keyCount = 3)

        if ($switcharoo_On = 0)

            $switcharoo_On := 1
            
        end if

   else

        if ($keyCount = 4)

            if ($switcharoo_On = 1)

                $switcharoo_On := 0
                $onGroup := 0

            end if

        end if

    end if

    inc ($beatCount)

    if ($beatCount = 5)

        $beatCount := 1

    end if
    
    $keyCount := 0

end on

{  }
